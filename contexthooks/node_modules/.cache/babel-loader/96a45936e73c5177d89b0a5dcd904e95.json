{"ast":null,"code":"var _jsxFileName = \"/Users/onuchukwuchika/Projects/Reacts/contexthooks/src/contexts/ThemeContext.js\";\nimport React, { createContext, useState } from 'react';\nexport const ThemeContext = createContext();\n\nconst ThemeContextProvider = () => {\n  const [isLightTheme, setIsLightTheme] = useState(false);\n  const [light, setLight] = useState({\n    syntax: '#555',\n    ui: '#ddd',\n    bg: '#eee'\n  });\n  const [dark, setDark] = useState({\n    syntax: '#ddd',\n    ui: '#333',\n    bg: '#555'\n  });\n\n  const toggleTheme = () => {\n    setIsLightTheme(!isLightTheme);\n  };\n\n  return React.createElement(ThemeContext.Provider, {\n    value: {\n      isLightTheme,\n      light,\n      dark,\n      toggleTheme\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, this.props.children);\n};\n\nexport default ThemeContextProvider; // class ThemeContextProvider extends Component {\n//   state = {\n//     isLightTheme: false,\n//     light: { syntax: '#555', ui: '#ddd', bg: '#eee' },\n//     dark: { syntax: '#ddd', ui: '#333', bg: '#555' }\n//   }\n//   toggleTheme = () => {\n//     this.setState({ isLightTheme: !this.state.isLightTheme });\n//   }\n//   render() {\n//     return (\n//       <ThemeContext.Provider value={{ ...this.state, toggleTheme: this.toggleTheme }}>\n//         {this.props.children}\n//       </ThemeContext.Provider>\n//     );\n//   }\n// }\n// export default ThemeContextProvider;","map":{"version":3,"sources":["/Users/onuchukwuchika/Projects/Reacts/contexthooks/src/contexts/ThemeContext.js"],"names":["React","createContext","useState","ThemeContext","ThemeContextProvider","isLightTheme","setIsLightTheme","light","setLight","syntax","ui","bg","dark","setDark","toggleTheme","props","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,QAA+C,OAA/C;AAEA,OAAO,MAAMC,YAAY,GAAGF,aAAa,EAAlC;;AAEP,MAAMG,oBAAoB,GAAG,MAAM;AACjC,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCJ,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC;AAAEO,IAAAA,MAAM,EAAE,MAAV;AAAkBC,IAAAA,EAAE,EAAE,MAAtB;AAA8BC,IAAAA,EAAE,EAAE;AAAlC,GAAD,CAAlC;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC;AAAEO,IAAAA,MAAM,EAAE,MAAV;AAAkBC,IAAAA,EAAE,EAAE,MAAtB;AAA8BC,IAAAA,EAAE,EAAE;AAAlC,GAAD,CAAhC;;AAEA,QAAMG,WAAW,GAAG,MAAM;AACxBR,IAAAA,eAAe,CAAC,CAACD,YAAF,CAAf;AACD,GAFD;;AAIA,SACE,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAAEA,MAAAA,YAAF;AAAgBE,MAAAA,KAAhB;AAAuBK,MAAAA,IAAvB;AAA6BE,MAAAA;AAA7B,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,KAAKC,KAAL,CAAWC,QADd,CADF;AAKD,CAdD;;AAgBA,eAAeZ,oBAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import React, { createContext, useState } from 'react';\n\nexport const ThemeContext = createContext();\n\nconst ThemeContextProvider = () => {\n  const [isLightTheme, setIsLightTheme] = useState(false);\n  const [light, setLight] = useState({ syntax: '#555', ui: '#ddd', bg: '#eee' })\n  const [dark, setDark] = useState({ syntax: '#ddd', ui: '#333', bg: '#555' })\n\n  const toggleTheme = () => {\n    setIsLightTheme(!isLightTheme);\n  };\n\n  return (\n    <ThemeContext.Provider value={{ isLightTheme, light, dark, toggleTheme }}>\n      {this.props.children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport default ThemeContextProvider;\n\n// class ThemeContextProvider extends Component {\n//   state = {\n//     isLightTheme: false,\n//     light: { syntax: '#555', ui: '#ddd', bg: '#eee' },\n//     dark: { syntax: '#ddd', ui: '#333', bg: '#555' }\n//   }\n\n//   toggleTheme = () => {\n//     this.setState({ isLightTheme: !this.state.isLightTheme });\n//   }\n\n//   render() {\n//     return (\n//       <ThemeContext.Provider value={{ ...this.state, toggleTheme: this.toggleTheme }}>\n//         {this.props.children}\n//       </ThemeContext.Provider>\n//     );\n//   }\n// }\n\n// export default ThemeContextProvider;"]},"metadata":{},"sourceType":"module"}